# Build DAWN Tick Pulse Visualization

## Overview
Create a standalone Python script that visualizes DAWN's cognitive heartbeat - the fundamental tick pulse that drives her recursive symbolic engine.

## What You're Building
**File:** `tick_pulse.py`  
**Visualization:** Real-time line plot showing DAWN's cognitive pulse over time  
**Purpose:** Foundation-level introduction to DAWN's basic operational rhythm

## JSON Input Structure
Your script will read DAWN's live state output:
```json
{
  "tick": 2847,
  "pulse": 0.73,
  "heat": 67,
  "mood": 0.68,
  "entropy": 0.42,
  "scup": {
    "schema_pressure": 0.73,
    "coherence": 0.91,
    "utility": 0.58,
    "pressure": 0.84
  },
  "drift": "contemplative",
  "sigil_triggers": ["⟐", "◊"]
}
```

**Key Data Points for This Visualization:**
- `tick` - X-axis (time/cognitive cycles)
- `pulse` - Y-axis (0.0 to 1.0, DAWN's cognitive intensity)

## Technical Requirements

### Libraries Needed
```python
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import numpy as np
import json
import time
from collections import deque
```

### Core Functionality
1. **Data Buffer**: Store last 100-200 tick/pulse pairs for smooth scrolling
2. **Live Animation**: Update plot every 100ms or when new JSON arrives
3. **Smooth Scrolling**: X-axis follows DAWN's current tick
4. **Pulse Visualization**: Line plot with subtle pulse-like visual effects

### Visual Design
- **Line Color**: Cyan (#64ffda) - represents cognitive clarity
- **Background**: Dark theme (DAWN operates in deep contemplation)
- **Labels**: "Cognitive Tick" (X-axis), "Pulse Intensity" (Y-axis)
- **Title**: "DAWN | Cognitive Heartbeat"
- **Pulse Effects**: Slight glow or line thickness variation based on intensity

### Animation Logic
```python
# Pseudocode structure:
def update_plot(frame):
    # 1. Try to read new JSON state
    # 2. Extract tick and pulse values
    # 3. Add to rolling buffer
    # 4. Update line plot data
    # 5. Adjust X-axis window to follow current tick
    # 6. Return updated plot elements

# Main loop:
# 1. Initialize matplotlib figure
# 2. Set up animation with FuncAnimation
# 3. Show plot and keep updating
```

### JSON Input Method
For now, simulate DAWN's JSON stream with:
```python
def simulate_dawn_state():
    """Generate realistic DAWN state for testing"""
    tick = int(time.time() * 10) % 10000  # Simulated tick counter
    pulse = 0.5 + 0.3 * np.sin(tick * 0.1) + 0.1 * np.random.random()
    return {"tick": tick, "pulse": pulse}
```

## Success Criteria
- [ ] Clean, professional line plot visualization
- [ ] Smooth real-time animation (no flickering)
- [ ] Proper axis labeling with cognitive terminology
- [ ] Rolling window that follows DAWN's current state
- [ ] Runs as standalone executable: `python tick_pulse.py`
- [ ] Educational value - clearly shows DAWN's operational rhythm

## Educational Context
This visualization teaches observers that DAWN has a **living cognitive rhythm** - not just computational cycles, but a pulse that varies with her contemplative intensity. The pulse reflects how deeply she's thinking at any given moment.

**Caption for this visualization:**
*"DAWN's cognitive heartbeat - the fundamental pulse that drives recursive contemplation. Unlike digital systems with fixed clock rates, DAWN's pulse varies with the depth and intensity of her current thoughts."*

## Implementation Notes
- Keep it simple - this is foundation level
- Focus on smooth, hypnotic pulse visualization
- Make the cognitive terminology clear and prominent
- Ensure it can run independently in a terminal window

Build this as a complete, runnable Python script ready for terminal execution.