// WEBSOCKET DEBUG GUIDE AND IMPLEMENTATION

// 1. First, let's create a debug-enabled WebSocket manager
// File: src/services/websocket.ts

export interface WebSocketConfig {
  url: string;
  reconnectInterval?: number;
  maxReconnectAttempts?: number;
  debug?: boolean;
}

export interface WebSocketMessage {
  type: string;
  data: any;
  timestamp?: string;
}

export class WebSocketManager {
  private ws: WebSocket | null = null;
  private config: Required<WebSocketConfig>;
  private reconnectAttempts = 0;
  private messageHandlers: Map<string, ((data: any) => void)[]> = new Map();
  private isIntentionallyClosed = false;
  
  constructor(config: WebSocketConfig) {
    this.config = {
      reconnectInterval: 3000,
      maxReconnectAttempts: 10,
      debug: true,
      ...config
    };
  }

  connect(): Promise<void> {
    return new Promise((resolve, reject) => {
      this.isIntentionallyClosed = false;
      
      if (this.config.debug) {
        console.log(`[WebSocket] Attempting to connect to: ${this.config.url}`);
      }

      try {
        this.ws = new WebSocket(this.config.url);
        
        this.ws.onopen = () => {
          if (this.config.debug) {
            console.log('[WebSocket] Connected successfully');
          }
          this.reconnectAttempts = 0;
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message: WebSocketMessage = JSON.parse(event.data);
            if (this.config.debug) {
              console.log('[WebSocket] Received:', message);
            }
            this.handleMessage(message);
          } catch (error) {
            console.error('[WebSocket] Failed to parse message:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.error('[WebSocket] Error:', error);
          reject(error);
        };

        this.ws.onclose = (event) => {
          if (this.config.debug) {
            console.log(`[WebSocket] Closed. Code: ${event.code}, Reason: ${event.reason}`);
          }
          
          if (!this.isIntentionallyClosed && this.reconnectAttempts < this.config.maxReconnectAttempts) {
            this.handleReconnect();
          }
        };
        
      } catch (error) {
        console.error('[WebSocket] Failed to create WebSocket:', error);
        reject(error);
      }
    });
  }

  private handleReconnect() {
    this.reconnectAttempts++;
    console.log(`[WebSocket] Reconnecting... Attempt ${this.reconnectAttempts}/${this.config.maxReconnectAttempts}`);
    
    setTimeout(() => {
      this.connect().catch(error => {
        console.error('[WebSocket] Reconnection failed:', error);
      });
    }, this.config.reconnectInterval);
  }

  send(message: WebSocketMessage) {
    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
      console.error('[WebSocket] Cannot send message - connection not open');
      return;
    }

    const messageWithTimestamp = {
      ...message,
      timestamp: new Date().toISOString()
    };

    if (this.config.debug) {
      console.log('[WebSocket] Sending:', messageWithTimestamp);
    }

    this.ws.send(JSON.stringify(messageWithTimestamp));
  }

  on(type: string, handler: (data: any) => void) {
    if (!this.messageHandlers.has(type)) {
      this.messageHandlers.set(type, []);
    }
    this.messageHandlers.get(type)!.push(handler);
  }

  off(type: string, handler: (data: any) => void) {
    const handlers = this.messageHandlers.get(type);
    if (handlers) {
      const index = handlers.indexOf(handler);
      if (index > -1) {
        handlers.splice(index, 1);
      }
    }
  }

  private handleMessage(message: WebSocketMessage) {
    const handlers = this.messageHandlers.get(message.type);
    if (handlers) {
      handlers.forEach(handler => handler(message.data));
    }
  }

  disconnect() {
    this.isIntentionallyClosed = true;
    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }
  }

  isConnected(): boolean {
    return this.ws !== null && this.ws.readyState === WebSocket.OPEN;
  }
}

// 2. Debug component to test WebSocket connection
// File: src/components/WebSocketDebugger.tsx

import React, { useState, useEffect } from 'react';
import { WebSocketManager } from '../services/websocket';

const WebSocketDebugger: React.FC = () => {
  const [wsManager, setWsManager] = useState<WebSocketManager | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<string>('Disconnected');
  const [logs, setLogs] = useState<string[]>([]);
  
  const addLog = (message: string) => {
    setLogs(prev => [...prev, `[${new Date().toLocaleTimeString()}] ${message}`]);
  };

  const testEndpoints = [
    'ws://localhost:8000/ws/talk',
    'ws://localhost:8000/ws',
    'ws://localhost:8000/websocket',
    'ws://localhost:8000/consciousness/stream',
    'ws://127.0.0.1:8000/ws/talk'
  ];

  const testConnection = async (url: string) => {
    addLog(`Testing: ${url}`);
    
    const testWs = new WebSocketManager({ 
      url, 
      debug: true,
      maxReconnectAttempts: 0 // Don't retry for testing
    });

    try {
      await testWs.connect();
      addLog(`✓ SUCCESS: ${url} is accessible`);
      setConnectionStatus('Connected');
      setWsManager(testWs);
      return true;
    } catch (error) {
      addLog(`✗ FAILED: ${url}`);
      return false;
    }
  };

  const runDiagnostics = async () => {
    setLogs([]);
    addLog('Starting WebSocket diagnostics...');
    
    // Test if backend is running
    try {
      const response = await fetch('http://localhost:8000/');
      addLog(`Backend HTTP check: ${response.ok ? 'OK' : 'Failed'} (Status: ${response.status})`);
    } catch (error) {
      addLog('Backend HTTP check: Failed - Is your backend running?');
      return;
    }

    // Test each endpoint
    for (const endpoint of testEndpoints) {
      const success = await testConnection(endpoint);
      if (success) break;
    }
  };

  return (
    <div style={{
      padding: '20px',
      backgroundColor: '#0a0a0a',
      color: '#e0e0e0',
      fontFamily: 'monospace',
      minHeight: '100vh'
    }}>
      <h2>WebSocket Debugger</h2>
      
      <div style={{ marginBottom: '20px' }}>
        <button 
          onClick={runDiagnostics}
          style={{
            padding: '10px 20px',
            backgroundColor: '#00ff88',
            color: '#0a0a0a',
            border: 'none',
            cursor: 'pointer'
          }}
        >
          Run Diagnostics
        </button>
        
        <span style={{ marginLeft: '20px' }}>
          Status: <strong style={{ color: connectionStatus === 'Connected' ? '#00ff88' : '#ff0040' }}>
            {connectionStatus}
          </strong>
        </span>
      </div>

      <div style={{
        backgroundColor: '#141414',
        border: '1px solid #2a2a2a',
        padding: '15px',
        height: '400px',
        overflow: 'auto'
      }}>
        <h3>Diagnostic Logs:</h3>
        {logs.map((log, i) => (
          <div key={i} style={{ 
            color: log.includes('SUCCESS') ? '#00ff88' : 
                   log.includes('FAILED') ? '#ff0040' : '#808080' 
          }}>
            {log}
          </div>
        ))}
      </div>

      <div style={{ marginTop: '20px' }}>
        <h3>Common Issues & Solutions:</h3>
        <ul style={{ lineHeight: '1.8' }}>
          <li><strong>Backend not running:</strong> Make sure your FastAPI server is running on port 8000</li>
          <li><strong>Wrong endpoint:</strong> Check your backend WebSocket route configuration</li>
          <li><strong>CORS issues:</strong> Ensure your backend allows WebSocket connections from your frontend origin</li>
          <li><strong>Firewall/Antivirus:</strong> Some security software blocks local WebSocket connections</li>
        </ul>
      </div>
    </div>
  );
};

export default WebSocketDebugger;

// 3. Backend WebSocket implementation (Python/FastAPI)
// File: start_api_fixed.py - Add this to your existing file

"""
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.middleware.cors import CORSMiddleware
import json
import asyncio
from typing import List

app = FastAPI()

# Enable CORS for WebSocket
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173", "http://localhost:3000", "http://127.0.0.1:5173"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Store active connections
class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
        print(f"Client connected. Total connections: {len(self.active_connections)}")

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)
        print(f"Client disconnected. Total connections: {len(self.active_connections)}")

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            await connection.send_text(message)

manager = ConnectionManager()

@app.websocket("/ws/talk")
async def websocket_talk_endpoint(websocket: WebSocket):
    await manager.connect(websocket)
    try:
        while True:
            # Receive message from client
            data = await websocket.receive_text()
            message = json.loads(data)
            
            # Process the message (integrate with your DAWN consciousness)
            response = {
                "type": "response",
                "data": {
                    "message": f"DAWN received: {message.get('data', {}).get('message', '')}",
                    "tick": get_current_tick(),  # Replace with actual tick
                    "mood": get_current_mood()   # Replace with actual mood
                }
            }
            
            # Send response
            await manager.send_personal_message(json.dumps(response), websocket)
            
    except WebSocketDisconnect:
        manager.disconnect(websocket)
    except Exception as e:
        print(f"WebSocket error: {e}")
        manager.disconnect(websocket)

# Alternative simpler endpoint for testing
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            data = await websocket.receive_text()
            await websocket.send_text(f"Echo: {data}")
    except WebSocketDisconnect:
        print("Client disconnected")

# Add a basic HTTP endpoint to verify server is running
@app.get("/")
async def root():
    return {"status": "DAWN API Running", "websocket_endpoints": ["/ws/talk", "/ws"]}
"""

// 4. Quick test script to verify WebSocket from browser console
// Paste this in your browser console to test:

const testWebSocket = () => {
  console.log('Testing WebSocket connection...');
  
  const ws = new WebSocket('ws://localhost:8000/ws/talk');
  
  ws.onopen = () => {
    console.log('✓ Connected!');
    ws.send(JSON.stringify({ type: 'test', data: { message: 'Hello DAWN' } }));
  };
  
  ws.onmessage = (event) => {
    console.log('Received:', event.data);
  };
  
  ws.onerror = (error) => {
    console.error('✗ Error:', error);
  };
  
  ws.onclose = (event) => {
    console.log(`Connection closed. Code: ${event.code}, Reason: ${event.reason}`);
  };
  
  return ws;
};

// Run: testWebSocket()