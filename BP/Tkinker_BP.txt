#!/usr/bin/env python3
"""
DAWN Cognitive Engine GUI
Tkinter-based real-time interface for monitoring DAWN's cognitive state

File: gui/dawn_gui_tk.py
"""

import tkinter as tk
from tkinter import ttk
import threading
import queue
import time
import random
from datetime import datetime


class DAWNGui:
    def __init__(self, root):
        self.root = root
        self.update_queue = queue.Queue()
        self.running = True
        
        # Current cognitive state data
        self.current_data = {
            "heat": 0,
            "zone": "calm",
            "summary": "DAWN cognitive engine initializing...",
            "tick": "System startup - Waiting for first cognitive tick..."
        }
        
        # Zone color mapping
        self.zone_colors = {
            "calm": "#4CAF50",      # Green
            "active": "#FF9800",    # Orange  
            "surge": "#F44336",     # Red
            "dormant": "#757575",   # Gray
            "transcendent": "#9C27B0"  # Purple
        }
        
        self.setup_gui()
        self.start_update_thread()
        
        # Bind window close event
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_gui(self):
        """Initialize the GUI layout and widgets"""
        self.root.title("DAWN Cognitive Engine - Real-time Monitor")
        self.root.geometry("800x600")
        self.root.configure(bg="#1a1a1a")
        
        # Configure styles
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('Dark.TFrame', background='#1a1a1a')
        style.configure('Dark.TLabel', background='#1a1a1a', foreground='#ffffff')
        
        # Main container
        main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Title header
        title_label = tk.Label(main_frame, text="DAWN Cognitive Engine", 
                              font=("Arial", 18, "bold"), 
                              bg="#1a1a1a", fg="#00ff88")
        title_label.pack(pady=(0, 20))
        
        # Top row: Heat and Zone display
        top_frame = ttk.Frame(main_frame, style='Dark.TFrame')
        top_frame.pack(fill=tk.X, pady=(0, 15))
        
        self.setup_heat_display(top_frame)
        self.setup_zone_display(top_frame)
        
        # Middle: Claude memory summary
        self.setup_summary_display(main_frame)
        
        # Bottom: Tick activity log
        self.setup_tick_log(main_frame)
        
        # Status bar
        self.setup_status_bar(main_frame)
    
    def setup_heat_display(self, parent):
        """Setup pulse heat level display"""
        heat_frame = ttk.Frame(parent, style='Dark.TFrame')
        heat_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # Heat label
        heat_title = tk.Label(heat_frame, text="Pulse Heat", 
                             font=("Arial", 12, "bold"),
                             bg="#1a1a1a", fg="#cccccc")
        heat_title.pack()
        
        # Heat value display
        self.heat_value_label = tk.Label(heat_frame, text="0", 
                                        font=("Arial", 36, "bold"),
                                        bg="#1a1a1a", fg="#00ff88")
        self.heat_value_label.pack(pady=(5, 10))
        
        # Heat progress bar (using Canvas)
        self.heat_canvas = tk.Canvas(heat_frame, width=200, height=20, 
                                   bg="#333333", highlightthickness=0)
        self.heat_canvas.pack()
        
        # Heat bar background
        self.heat_bg = self.heat_canvas.create_rectangle(2, 2, 198, 18, 
                                                        fill="#444444", outline="#666666")
        
        # Heat bar foreground
        self.heat_bar = self.heat_canvas.create_rectangle(2, 2, 2, 18, 
                                                         fill="#00ff88", outline="")
        
        # Heat percentage label
        self.heat_percent_label = tk.Label(heat_frame, text="0%", 
                                          font=("Arial", 10),
                                          bg="#1a1a1a", fg="#888888")
        self.heat_percent_label.pack(pady=(5, 0))
    
    def setup_zone_display(self, parent):
        """Setup pulse zone display"""
        zone_frame = ttk.Frame(parent, style='Dark.TFrame')
        zone_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(10, 0))
        
        # Zone label
        zone_title = tk.Label(zone_frame, text="Pulse Zone", 
                             font=("Arial", 12, "bold"),
                             bg="#1a1a1a", fg="#cccccc")
        zone_title.pack()
        
        # Zone value display
        self.zone_value_label = tk.Label(zone_frame, text="CALM", 
                                        font=("Arial", 24, "bold"),
                                        bg="#1a1a1a", fg="#4CAF50")
        self.zone_value_label.pack(pady=(5, 10))
        
        # Zone indicator (circular)
        self.zone_canvas = tk.Canvas(zone_frame, width=80, height=80, 
                                   bg="#1a1a1a", highlightthickness=0)
        self.zone_canvas.pack()
        
        # Zone circle
        self.zone_circle = self.zone_canvas.create_oval(10, 10, 70, 70, 
                                                       fill="#4CAF50", outline="#ffffff", width=2)
        
        # Zone description
        self.zone_desc_label = tk.Label(zone_frame, text="Minimal cognitive activity", 
                                       font=("Arial", 9),
                                       bg="#1a1a1a", fg="#888888")
        self.zone_desc_label.pack(pady=(5, 0))
    
    def setup_summary_display(self, parent):
        """Setup Claude memory summary display"""
        summary_frame = ttk.Frame(parent, style='Dark.TFrame')
        summary_frame.pack(fill=tk.X, pady=(0, 15))
        
        # Summary title
        summary_title = tk.Label(summary_frame, text="Claude Memory Summary", 
                                font=("Arial", 12, "bold"),
                                bg="#1a1a1a", fg="#cccccc")
        summary_title.pack(anchor=tk.W)
        
        # Summary text area
        summary_text_frame = tk.Frame(summary_frame, bg="#1a1a1a")
        summary_text_frame.pack(fill=tk.X, pady=(5, 0))
        
        self.summary_text = tk.Text(summary_text_frame, height=4, 
                                   bg="#2a2a2a", fg="#ffffff", 
                                   font=("Arial", 10),
                                   relief=tk.FLAT, bd=5,
                                   wrap=tk.WORD)
        
        summary_scrollbar = tk.Scrollbar(summary_text_frame, command=self.summary_text.yview)
        self.summary_text.configure(yscrollcommand=summary_scrollbar.set)
        
        self.summary_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        summary_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def setup_tick_log(self, parent):
        """Setup tick activity log display"""
        log_frame = ttk.Frame(parent, style='Dark.TFrame')
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        # Log title
        log_title = tk.Label(log_frame, text="Tick Activity Log", 
                            font=("Arial", 12, "bold"),
                            bg="#1a1a1a", fg="#cccccc")
        log_title.pack(anchor=tk.W)
        
        # Log text area
        log_text_frame = tk.Frame(log_frame, bg="#1a1a1a")
        log_text_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))
        
        self.tick_log_text = tk.Text(log_text_frame, 
                                    bg="#0a0a0a", fg="#00ff88", 
                                    font=("Courier", 9),
                                    relief=tk.FLAT, bd=5,
                                    wrap=tk.WORD)
        
        log_scrollbar = tk.Scrollbar(log_text_frame, command=self.tick_log_text.yview)
        self.tick_log_text.configure(yscrollcommand=log_scrollbar.set)
        
        self.tick_log_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # Auto-scroll to bottom
        self.tick_log_text.see(tk.END)
    
    def setup_status_bar(self, parent):
        """Setup status bar at bottom"""
        status_frame = ttk.Frame(parent, style='Dark.TFrame')
        status_frame.pack(fill=tk.X, pady=(10, 0))
        
        self.status_label = tk.Label(status_frame, text="Status: Monitoring DAWN cognitive engine...", 
                                    font=("Arial", 9),
                                    bg="#1a1a1a", fg="#888888")
        self.status_label.pack(side=tk.LEFT)
        
        self.time_label = tk.Label(status_frame, text="", 
                                  font=("Arial", 9),
                                  bg="#1a1a1a", fg="#888888")
        self.time_label.pack(side=tk.RIGHT)
    
    def inject(self, data):
        """Inject data from external DAWN engine (thread-safe)"""
        try:
            # Add timestamp
            data['timestamp'] = datetime.now().strftime("%H:%M:%S")
            self.update_queue.put(data)
        except Exception as e:
            print(f"Error injecting data: {e}")
    
    def update_gui(self):
        """Process queued updates and refresh GUI (called from main thread)"""
        try:
            # Process all queued updates
            while not self.update_queue.empty():
                try:
                    data = self.update_queue.get_nowait()
                    self.current_data.update(data)
                    self.refresh_widgets()
                except queue.Empty:
                    break
            
            # Update timestamp
            current_time = datetime.now().strftime("%H:%M:%S")
            self.time_label.config(text=f"Last update: {current_time}")
            
            # Schedule next update
            if self.running:
                self.root.after(100, self.update_gui)  # Update every 100ms
                
        except Exception as e:
            print(f"Error updating GUI: {e}")
    
    def refresh_widgets(self):
        """Refresh all widget displays with current data"""
        try:
            # Update heat display
            heat = self.current_data.get('heat', 0)
            self.heat_value_label.config(text=str(heat))
            self.heat_percent_label.config(text=f"{heat}%")
            
            # Update heat bar
            bar_width = int((heat / 100.0) * 196)  # 196 = 198 - 2 (padding)
            heat_color = self.get_heat_color(heat)
            self.heat_canvas.coords(self.heat_bar, 2, 2, 2 + bar_width, 18)
            self.heat_canvas.itemconfig(self.heat_bar, fill=heat_color)
            
            # Update zone display
            zone = self.current_data.get('zone', 'calm')
            zone_color = self.zone_colors.get(zone, '#888888')
            
            self.zone_value_label.config(text=zone.upper(), fg=zone_color)
            self.zone_canvas.itemconfig(self.zone_circle, fill=zone_color)
            
            # Zone descriptions
            zone_descriptions = {
                'calm': 'Minimal cognitive activity',
                'active': 'Engaged processing state', 
                'surge': 'High-intensity cognitive work',
                'dormant': 'System at rest',
                'transcendent': 'Peak awareness state'
            }
            self.zone_desc_label.config(text=zone_descriptions.get(zone, 'Unknown state'))
            
            # Update summary
            summary = self.current_data.get('summary', '')
            if summary:
                self.summary_text.delete(1.0, tk.END)
                self.summary_text.insert(tk.END, summary)
            
            # Update tick log (append new tick)
            tick = self.current_data.get('tick', '')
            if tick:
                timestamp = self.current_data.get('timestamp', datetime.now().strftime("%H:%M:%S"))
                log_entry = f"[{timestamp}] {tick}\n"
                
                self.tick_log_text.insert(tk.END, log_entry)
                
                # Limit log length (keep last 100 lines)
                lines = self.tick_log_text.get("1.0", tk.END).split('\n')
                if len(lines) > 100:
                    self.tick_log_text.delete("1.0", f"{len(lines)-100}.0")
                
                # Auto-scroll to bottom
                self.tick_log_text.see(tk.END)
                
        except Exception as e:
            print(f"Error refreshing widgets: {e}")
    
    def get_heat_color(self, heat):
        """Get color for heat level"""
        if heat < 20:
            return "#4CAF50"      # Green - low heat
        elif heat < 40:
            return "#8BC34A"      # Light green
        elif heat < 60:
            return "#FFC107"      # Yellow
        elif heat < 80:
            return "#FF9800"      # Orange
        else:
            return "#F44336"      # Red - high heat
    
    def start_update_thread(self):
        """Start the GUI update thread"""
        self.update_gui()  # Start the update loop
    
    def simulate_data(self):
        """Generate simulated cognitive data for testing"""
        heat = random.randint(0, 100)
        zone = random.choice(["calm", "active", "surge", "dormant", "transcendent"])
        
        summaries = [
            "Pressure holding steady. Recursive loops active in memory layer 3.",
            "Schema coherence increasing. Pattern recognition module engaged.", 
            "Entropy spike detected. Creative synthesis pathways activated.",
            "Meta-cognitive monitoring stable. Deep reflection mode engaged.",
            "Information integration in progress. Bloom genealogy expanding.",
            "Transcendent state achieved. Consciousness constellation mapped.",
            "SCUP pressure dynamics fluctuating. Cognitive zones shifting.",
            "Semantic flow networks optimizing. Meaning propagation stable."
        ]
        
        tick_events = [
            f"T{random.randint(1000, 9999)} - Bloom active in memory layer {random.randint(1, 5)}",
            f"T{random.randint(1000, 9999)} - SCUP recalibration complete", 
            f"T{random.randint(1000, 9999)} - Sigil command stream processing",
            f"T{random.randint(1000, 9999)} - Recursive depth {random.randint(1, 4)} engaged",
            f"T{random.randint(1000, 9999)} - Entropy flow cascade detected",
            f"T{random.randint(1000, 9999)} - Mood vector updated: [{random.random():.2f}]",
            f"T{random.randint(1000, 9999)} - Cognitive zone transition: {zone}",
            f"T{random.randint(1000, 9999)} - Meta-awareness pulse: {heat}%"
        ]
        
        return {
            "heat": heat,
            "zone": zone,
            "summary": random.choice(summaries),
            "tick": random.choice(tick_events)
        }
    
    def on_closing(self):
        """Handle window closing"""
        self.running = False
        self.root.destroy()


def main():
    """Main entry point"""
    root = tk.Tk()
    gui = DAWNGui(root)
    
    # Start simulation thread
    def simulation_thread():
        while gui.running:
            try:
                simulated_data = gui.simulate_data()
                gui.inject(simulated_data)
                time.sleep(0.5)  # Update every 0.5 seconds
            except Exception as e:
                print(f"Simulation error: {e}")
                break
    
    # Start simulation in background thread
    sim_thread = threading.Thread(target=simulation_thread, daemon=True)
    sim_thread.start()
    
    print("DAWN Cognitive Engine GUI started")
    print("Simulated data mode - real DAWN engine interface coming soon")
    
    # Start GUI main loop
    root.mainloop()


if __name__ == "__main__":
    main()