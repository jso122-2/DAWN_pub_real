import React, { useState, useEffect, useRef, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import * as d3 from 'd3';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, Float, Text, Box } from '@react-three/drei';

// Types for our data structures
interface TickData {
  tick_number: number;
  scup: number;
  entropy: number;
  mood: string;
  timestamp: number;
  module_states?: Record<string, ModuleState>;
  active_processes?: string[];
  memory_glyphs?: MemoryGlyph[];
}

interface ModuleState {
  id: string;
  name: string;
  active: boolean;
  health: number;
  connections: string[];
}

interface MemoryGlyph {
  id: string;
  symbol: string;
  weight: number;
  decay: number;
  lastAccessed: number;
  emotionalValence: number;
}

interface FlowNode {
  id: string;
  name: string;
  x?: number;
  y?: number;
  vx?: number;
  vy?: number;
  entropy: number;
  scup: number;
  active: boolean;
}

interface FlowLink {
  source: string | FlowNode;
  target: string | FlowNode;
  value: number;
  type: 'neural' | 'quantum' | 'chaos';
}

// Mock WebSocket connection - replace with real WebSocket manager
const useMockTickData = () => {
  const [tickData, setTickData] = useState<TickData[]>([]);
  
  useEffect(() => {
    const interval = setInterval(() => {
      const newTick: TickData = {
        tick_number: Date.now(),
        scup: 50 + Math.random() * 50,
        entropy: Math.random(),
        mood: ['ecstatic', 'focused', 'chaotic', 'contemplative', 'neutral'][Math.floor(Math.random() * 5)],
        timestamp: Date.now(),
        module_states: {
          'core': { id: 'core', name: 'DAWN Core', active: true, health: 0.9, connections: ['neural', 'chaos'] },
          'neural': { id: 'neural', name: 'Neural Engine', active: true, health: 0.85, connections: ['core', 'quantum'] },
          'chaos': { id: 'chaos', name: 'Chaos Engine', active: Math.random() > 0.5, health: 0.7, connections: ['core', 'quantum'] },
          'quantum': { id: 'quantum', name: 'Quantum Process', active: true, health: 0.95, connections: ['neural', 'chaos'] }
        },
        active_processes: ['core', 'neural', 'quantum'],
        memory_glyphs: Array.from({ length: 12 }, (_, i) => ({
          id: `glyph-${i}`,
          symbol: ['◈', '◉', '◊', '◐', '◑', '◒', '◓', '◔', '◕', '◖', '◗', '◈'][i],
          weight: Math.random(),
          decay: Math.random() * 0.5,
          lastAccessed: Date.now() - Math.random() * 10000,
          emotionalValence: Math.random() * 2 - 1
        }))
      };
      
      setTickData(prev => [...prev.slice(-100), newTick]);
    }, 1000);
    
    return () => clearInterval(interval);
  }, []);
  
  return tickData;
};

// Force-Directed Graph Component
const ForceDirectedGraph: React.FC<{ tickData: TickData[] }> = ({ tickData }) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const simulationRef = useRef<d3.Simulation<FlowNode, FlowLink> | null>(null);
  
  useEffect(() => {
    if (!svgRef.current || tickData.length === 0) return;
    
    const latestTick = tickData[tickData.length - 1];
    if (!latestTick.module_states) return;
    
    const width = 600;
    const height = 400;
    
    // Transform module states to nodes
    const nodes: FlowNode[] = Object.values(latestTick.module_states).map(module => ({
      id: module.id,
      name: module.name,
      entropy: module.id === 'chaos' ? latestTick.entropy : latestTick.entropy * 0.5,
      scup: module.health * 100,
      active: module.active
    }));
    
    // Create links from connections
    const links: FlowLink[] = [];
    Object.values(latestTick.module_states).forEach(module => {
      module.connections.forEach(targetId => {
        if (module.id < targetId) { // Avoid duplicates
          links.push({
            source: module.id,
            target: targetId,
            value: Math.random() * 0.5 + 0.5,
            type: module.id === 'chaos' ? 'chaos' : 'neural'
          });
        }
      });
    });
    
    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove();
    
    // Add gradient definitions
    const defs = svg.append('defs');
    
    const gradient = defs.append('radialGradient')
      .attr('id', 'node-gradient')
      .attr('cx', '50%')
      .attr('cy', '50%')
      .attr('r', '50%');
      
    gradient.append('stop')
      .attr('offset', '0%')
      .attr('stop-color', '#8338ec')
      .attr('stop-opacity', 0.8);
      
    gradient.append('stop')
      .attr('offset', '100%')
      .attr('stop-color', '#ff006e')
      .attr('stop-opacity', 0.3);
    
    const g = svg.append('g');
    
    // Create zoom behavior
    const zoom = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.5, 3])
      .on('zoom', (event) => {
        g.attr('transform', event.transform.toString());
      });
    
    svg.call(zoom);
    
    // Create force simulation
    const simulation = d3.forceSimulation<FlowNode>(nodes)
      .force('link', d3.forceLink<FlowNode, FlowLink>(links).id(d => d.id).distance(100))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30));
    
    simulationRef.current = simulation;
    
    // Create links
    const link = g.append('g')
      .selectAll('line')
      .data(links)
      .enter().append('line')
      .attr('stroke', d => d.type === 'chaos' ? '#fb5607' : '#8338ec')
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', d => Math.sqrt(d.value) * 3);
    
    // Create nodes
    const node = g.append('g')
      .selectAll('g')
      .data(nodes)
      .enter().append('g')
      .call(d3.drag<SVGGElement, FlowNode>()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));
    
    // Add circles to nodes
    node.append('circle')
      .attr('r', d => 10 + d.scup / 5)
      .attr('fill', 'url(#node-gradient)')
      .attr('stroke', d => d.active ? '#fff' : '#666')
      .attr('stroke-width', 2)
      .attr('opacity', d => d.active ? 0.9 : 0.4);
    
    // Add labels
    node.append('text')
      .text(d => d.name)
      .attr('x', 0)
      .attr('y', -20)
      .attr('text-anchor', 'middle')
      .attr('fill', '#fff')
      .attr('font-size', '12px');
    
    // Update positions on tick
    simulation.on('tick', () => {
      link
        .attr('x1', d => (d.source as FlowNode).x!)
        .attr('y1', d => (d.source as FlowNode).y!)
        .attr('x2', d => (d.target as FlowNode).x!)
        .attr('y2', d => (d.target as FlowNode).y!);
      
      node.attr('transform', d => `translate(${d.x},${d.y})`);
    });
    
    function dragstarted(event: d3.D3DragEvent<SVGGElement, FlowNode, FlowNode>, d: FlowNode) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      d.fx = d.x;
      d.fy = d.y;
    }
    
    function dragged(event: d3.D3DragEvent<SVGGElement, FlowNode, FlowNode>, d: FlowNode) {
      d.fx = event.x;
      d.fy = event.y;
    }
    
    function dragended(event: d3.D3DragEvent<SVGGElement, FlowNode, FlowNode>, d: FlowNode) {
      if (!event.active) simulation.alphaTarget(0);
      d.fx = null;
      d.fy = null;
    }
    
    return () => {
      simulation.stop();
    };
  }, [tickData]);
  
  return (
    <svg ref={svgRef} width="100%" height="100%" viewBox="0 0 600 400" />
  );
};

// Spiral State Stream Component
const SpiralStateStream: React.FC<{ tickData: TickData[] }> = ({ tickData }) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  
  useEffect(() => {
    if (!canvasRef.current || tickData.length === 0) return;
    
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d')!;
    const width = canvas.width;
    const height = canvas.height;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Draw spiral
    const centerX = width / 2;
    const centerY = height / 2;
    const maxRadius = Math.min(width, height) * 0.4;
    
    // Mood colors
    const moodColors: Record<string, string> = {
      'ecstatic': '#ff006e',
      'focused': '#8338ec',
      'chaotic': '#fb5607',
      'contemplative': '#3a86ff',
      'neutral': '#ffbe0b'
    };
    
    // Draw spiral path
    ctx.beginPath();
    tickData.forEach((tick, i) => {
      const angle = i * 0.1;
      const radius = (i / tickData.length) * maxRadius;
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;
      
      if (i === 0) {
        ctx.moveTo(x, y);
      } else {
        ctx.lineTo(x, y);
      }
    });
    
    // Create gradient along path
    const gradient = ctx.createLinearGradient(centerX - maxRadius, centerY, centerX + maxRadius, centerY);
    tickData.forEach((tick, i) => {
      const stop = i / tickData.length;
      gradient.addColorStop(stop, moodColors[tick.mood] || '#fff');
    });
    
    ctx.strokeStyle = gradient;
    ctx.lineWidth = 3;
    ctx.stroke();
    
    // Draw data points
    tickData.forEach((tick, i) => {
      const angle = i * 0.1;
      const radius = (i / tickData.length) * maxRadius;
      const x = centerX + Math.cos(angle) * radius;
      const y = centerY + Math.sin(angle) * radius;
      
      // Draw entropy as circle size
      const size = 3 + tick.entropy * 10;
      ctx.beginPath();
      ctx.arc(x, y, size, 0, Math.PI * 2);
      ctx.fillStyle = moodColors[tick.mood] || '#fff';
      ctx.globalAlpha = 0.8;
      ctx.fill();
      
      // Draw SCUP as glow
      ctx.shadowBlur = tick.scup / 5;
      ctx.shadowColor = moodColors[tick.mood] || '#fff';
      ctx.fill();
      ctx.shadowBlur = 0;
    });
    
    ctx.globalAlpha = 1;
  }, [tickData]);
  
  return (
    <canvas 
      ref={canvasRef} 
      width={400} 
      height={400} 
      className="w-full h-full"
      style={{ background: 'radial-gradient(ellipse at center, rgba(131, 56, 236, 0.1) 0%, transparent 70%)' }}
    />
  );
};

// Glyph Memory Lattice Component
const GlyphMemoryLattice: React.FC<{ glyphs: MemoryGlyph[] }> = ({ glyphs }) => {
  const positions = useMemo(() => {
    const positions: [number, number, number][] = [];
    const gridSize = Math.ceil(Math.sqrt(glyphs.length));
    
    for (let i = 0; i < glyphs.length; i++) {
      const row = Math.floor(i / gridSize);
      const col = i % gridSize;
      const x = (col - gridSize / 2) * 2;
      const y = (row - gridSize / 2) * 2;
      positions.push([x, y, 0]);
    }
    
    return positions;
  }, [glyphs.length]);
  
  return (
    <Canvas camera={{ position: [0, 0, 15], fov: 60 }}>
      <ambientLight intensity={0.5} />
      <pointLight position={[10, 10, 10]} intensity={1} />
      <OrbitControls enablePan={false} enableZoom={false} />
      
      {glyphs.map((glyph, i) => (
        <Float
          key={glyph.id}
          speed={2}
          rotationIntensity={glyph.emotionalValence}
          floatIntensity={1}
        >
          <group position={positions[i]}>
            <Box args={[1.5, 1.5, 0.1]} scale={glyph.weight}>
              <meshStandardMaterial
                color="#8338ec"
                emissive="#ff006e"
                emissiveIntensity={glyph.weight * 0.5}
                opacity={1 - glyph.decay}
                transparent
              />
            </Box>
            <Text
              position={[0, 0, 0.1]}
              fontSize={0.8}
              color="white"
              anchorX="center"
              anchorY="middle"
            >
              {glyph.symbol}
            </Text>
          </group>
        </Float>
      ))}
    </Canvas>
  );
};

// Main Dashboard Component
export default function VisualizationDashboard() {
  const tickData = useMockTickData();
  const [activeView, setActiveView] = useState<'all' | 'flow' | 'spiral' | 'glyph'>('all');
  
  const latestTick = tickData[tickData.length - 1];
  const glyphs = latestTick?.memory_glyphs || [];
  
  const containerClass = "relative overflow-hidden rounded-lg border border-purple-500/30 bg-black/40 backdrop-blur-md shadow-2xl";
  const glowClass = "absolute inset-0 bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-purple-500/10 blur-xl";
  
  return (
    <div className="min-h-screen bg-black text-white p-8">
      {/* Header */}
      <motion.div 
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <h1 className="text-4xl font-bold mb-2 bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
          DAWN Consciousness Visualizer
        </h1>
        <p className="text-gray-400">Real-time neural topology and state analysis</p>
      </motion.div>
      
      {/* Stats Bar */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="grid grid-cols-4 gap-4 mb-8"
      >
        {latestTick && (
          <>
            <div className={`${containerClass} p-4`}>
              <div className={glowClass} />
              <div className="relative z-10">
                <div className="text-sm text-gray-400">SCUP</div>
                <div className="text-2xl font-bold text-purple-400">{latestTick.scup.toFixed(1)}%</div>
              </div>
            </div>
            <div className={`${containerClass} p-4`}>
              <div className={glowClass} />
              <div className="relative z-10">
                <div className="text-sm text-gray-400">Entropy</div>
                <div className="text-2xl font-bold text-pink-400">{latestTick.entropy.toFixed(3)}</div>
              </div>
            </div>
            <div className={`${containerClass} p-4`}>
              <div className={glowClass} />
              <div className="relative z-10">
                <div className="text-sm text-gray-400">Mood</div>
                <div className="text-2xl font-bold text-cyan-400">{latestTick.mood}</div>
              </div>
            </div>
            <div className={`${containerClass} p-4`}>
              <div className={glowClass} />
              <div className="relative z-10">
                <div className="text-sm text-gray-400">Tick</div>
                <div className="text-2xl font-bold text-green-400">#{latestTick.tick_number}</div>
              </div>
            </div>
          </>
        )}
      </motion.div>
      
      {/* View Toggle */}
      <div className="flex gap-2 mb-6">
        {['all', 'flow', 'spiral', 'glyph'].map((view) => (
          <button
            key={view}
            onClick={() => setActiveView(view as any)}
            className={`px-4 py-2 rounded-lg transition-all ${
              activeView === view 
                ? 'bg-purple-600 text-white' 
                : 'bg-gray-800 text-gray-400 hover:bg-gray-700'
            }`}
          >
            {view.charAt(0).toUpperCase() + view.slice(1)}
          </button>
        ))}
      </div>
      
      {/* Visualizations Grid */}
      <div className={`grid ${activeView === 'all' ? 'grid-cols-2' : 'grid-cols-1'} gap-6`}>
        {/* Force-Directed Graph */}
        {(activeView === 'all' || activeView === 'flow') && (
          <motion.div 
            layout
            className={`${containerClass} p-6 ${activeView === 'flow' ? 'col-span-1' : ''}`}
            style={{ minHeight: '400px' }}
          >
            <div className={glowClass} />
            <div className="relative z-10">
              <h2 className="text-xl font-semibold mb-4 text-purple-300">Consciousness Flow Network</h2>
              <ForceDirectedGraph tickData={tickData} />
            </div>
          </motion.div>
        )}
        
        {/* Spiral State Stream */}
        {(activeView === 'all' || activeView === 'spiral') && (
          <motion.div 
            layout
            className={`${containerClass} p-6 ${activeView === 'spiral' ? 'col-span-1' : ''}`}
            style={{ minHeight: '400px' }}
          >
            <div className={glowClass} />
            <div className="relative z-10">
              <h2 className="text-xl font-semibold mb-4 text-pink-300">Temporal State Evolution</h2>
              <SpiralStateStream tickData={tickData} />
            </div>
          </motion.div>
        )}
        
        {/* Glyph Memory Lattice */}
        {(activeView === 'all' || activeView === 'glyph') && (
          <motion.div 
            layout
            className={`${containerClass} p-6 ${activeView === 'all' ? 'col-span-2' : 'col-span-1'}`}
            style={{ minHeight: '400px' }}
          >
            <div className={glowClass} />
            <div className="relative z-10">
              <h2 className="text-xl font-semibold mb-4 text-cyan-300">Memory Glyph Cache</h2>
              <div style={{ height: '350px' }}>
                <GlyphMemoryLattice glyphs={glyphs} />
              </div>
            </div>
          </motion.div>
        )}
      </div>
      
      {/* Connection Status */}
      <motion.div 
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="fixed bottom-4 right-4 flex items-center gap-2 px-4 py-2 rounded-lg bg-gray-900/80 backdrop-blur"
      >
        <div className={`w-2 h-2 rounded-full ${tickData.length > 0 ? 'bg-green-500' : 'bg-red-500'} animate-pulse`} />
        <span className="text-sm text-gray-400">
          {tickData.length > 0 ? 'Connected to DAWN Core' : 'Disconnected'}
        </span>
      </motion.div>
    </div>
  );
}